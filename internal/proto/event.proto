syntax = "proto3";

package eventpool;

option go_package = "event-pool/proto";

// EventService provides methods for streaming blockchain events
service EventService {
  // StreamEvents streams blockchain events to clients
  rpc StreamEvents(StreamEventsRequest) returns (stream Event) {}
  
  // GetEvents retrieves a list of events based on the request parameters
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
}

// StreamEventsRequest contains the parameters for subscribing to events
message StreamEventsRequest {
  int32 chain_id = 1;
  string contract_address = 2;
  string event_signature = 3;
}

// GetEventsRequest contains the parameters for retrieving events
message GetEventsRequest {
  int32 chain_id = 1;
  string contract_address = 2;
  string tx_hash = 3;  // Optional
  int32 take = 4;     // Optional, default 10
  int32 skip = 5;     // Optional, default 0
}

// GetEventsResponse contains a list of events and pagination info
message GetEventsResponse {
  repeated EventData data = 1;
  Pagination pagination = 2;
}

// EventData represents a blockchain event with additional metadata
message EventData {
  string id = 1;
  string contract_address = 2;
  int64 block_number = 3;
  string tx_hash = 4;
  int32 log_index = 5;
  string data = 6;
  string created_at = 7;
}

// Pagination contains pagination information
message Pagination {
  int32 skip = 1;
  int32 take = 2;
}

// Event represents a blockchain event
message Event {
  int64 block_number = 1;
  string tx_hash = 2;
  string data = 3;
}

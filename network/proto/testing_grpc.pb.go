// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: network/proto/testing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestService_SayHello_FullMethodName        = "/v1.TestService/SayHello"
	TestService_GetChattyServer_FullMethodName = "/v1.TestService/GetChattyServer"
	TestService_GetChattyClient_FullMethodName = "/v1.TestService/GetChattyClient"
	TestService_GetChattyBidi_FullMethodName   = "/v1.TestService/GetChattyBidi"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	SayHello(ctx context.Context, in *GenericMessage, opts ...grpc.CallOption) (*GenericMessage, error)
	GetChattyServer(ctx context.Context, in *ChattyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenericMessage], error)
	GetChattyClient(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GenericMessage, GenericMessage], error)
	GetChattyBidi(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GenericMessage, GenericMessage], error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) SayHello(ctx context.Context, in *GenericMessage, opts ...grpc.CallOption) (*GenericMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericMessage)
	err := c.cc.Invoke(ctx, TestService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetChattyServer(ctx context.Context, in *ChattyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenericMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_GetChattyServer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChattyRequest, GenericMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetChattyServerClient = grpc.ServerStreamingClient[GenericMessage]

func (c *testServiceClient) GetChattyClient(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GenericMessage, GenericMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_GetChattyClient_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenericMessage, GenericMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetChattyClientClient = grpc.ClientStreamingClient[GenericMessage, GenericMessage]

func (c *testServiceClient) GetChattyBidi(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GenericMessage, GenericMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], TestService_GetChattyBidi_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenericMessage, GenericMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetChattyBidiClient = grpc.BidiStreamingClient[GenericMessage, GenericMessage]

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility.
type TestServiceServer interface {
	SayHello(context.Context, *GenericMessage) (*GenericMessage, error)
	GetChattyServer(*ChattyRequest, grpc.ServerStreamingServer[GenericMessage]) error
	GetChattyClient(grpc.ClientStreamingServer[GenericMessage, GenericMessage]) error
	GetChattyBidi(grpc.BidiStreamingServer[GenericMessage, GenericMessage]) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceServer struct{}

func (UnimplementedTestServiceServer) SayHello(context.Context, *GenericMessage) (*GenericMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTestServiceServer) GetChattyServer(*ChattyRequest, grpc.ServerStreamingServer[GenericMessage]) error {
	return status.Errorf(codes.Unimplemented, "method GetChattyServer not implemented")
}
func (UnimplementedTestServiceServer) GetChattyClient(grpc.ClientStreamingServer[GenericMessage, GenericMessage]) error {
	return status.Errorf(codes.Unimplemented, "method GetChattyClient not implemented")
}
func (UnimplementedTestServiceServer) GetChattyBidi(grpc.BidiStreamingServer[GenericMessage, GenericMessage]) error {
	return status.Errorf(codes.Unimplemented, "method GetChattyBidi not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}
func (UnimplementedTestServiceServer) testEmbeddedByValue()                     {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).SayHello(ctx, req.(*GenericMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetChattyServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChattyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).GetChattyServer(m, &grpc.GenericServerStream[ChattyRequest, GenericMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetChattyServerServer = grpc.ServerStreamingServer[GenericMessage]

func _TestService_GetChattyClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).GetChattyClient(&grpc.GenericServerStream[GenericMessage, GenericMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetChattyClientServer = grpc.ClientStreamingServer[GenericMessage, GenericMessage]

func _TestService_GetChattyBidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).GetChattyBidi(&grpc.GenericServerStream[GenericMessage, GenericMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TestService_GetChattyBidiServer = grpc.BidiStreamingServer[GenericMessage, GenericMessage]

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _TestService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChattyServer",
			Handler:       _TestService_GetChattyServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChattyClient",
			Handler:       _TestService_GetChattyClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetChattyBidi",
			Handler:       _TestService_GetChattyBidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "network/proto/testing.proto",
}
